# -*- coding: utf-8 -*-
#

# Esri start of added imports
import sys, os, arcpy
# Esri end of added imports

# Esri start of added variables
g_ESRI_variable_1 = 'EID'
g_ESRI_variable_2 = 'int(!Handle!,16)'
g_ESRI_variable_3 = 'Element_ID'
g_ESRI_variable_4 = 'UDOT_Region'
g_ESRI_variable_5 = "'"
g_ESRI_variable_6 = 'UDOT_PIN'
# Esri end of added variables


#import arcpy
from sys import argv
#import os
import tempfile
import arcgis
from arcgis.gis import GIS
from arcgis.features import FeatureLayer
import json

gis = GIS("https://portal.udot.utah.gov/portal", "ConstAdmin", "UDOTG!$1")

arcpy.env.overwriteOutput = True


Excel_Report=arcpy.GetParameterAsText(0)#
#Excel_Report = r"D:\16443_Removals_ADV.xls"
CAD_File=arcpy.GetParameterAsText(1)#
#CAD_File = r"D:\16443_Removals_ADV.dgn"
UDOT_Region_Number=arcpy.GetParameterAsText(2)#
#UDOT_Region_Number = "Region 1"
Scale_factor=arcpy.GetParameterAsText(3)
#Scale_factor = 1
A0 = arcpy.GetParameterAsText(4)#
#A0 = 0
B0 = arcpy.GetParameterAsText(5)#
#B0 = 0
Utah_Zone=arcpy.GetParameterAsText(6)#
#Utah_Zone = "Central"
UDOT_PIN = arcpy.GetParameterAsText(7)#
#UDOT_PIN = '9999999'

#itemTable = arcpy.GetParameterAsText(8)#

#payItemTable = arcpy.GetParameterAsText(9)#
#payItemTable = temp_dir_sde + "\\" + temp_sde + "\DigitalDeliveryTesting.AGS.PayItemTable"
#fc = arcpy.GetParameterAsText(10)#


search_results = gis.content.search('title: Digital Delivery Design Data',
                                    'Feature Layer')

# Access the first Item that's returned
flItem = search_results[0]
flItemLayers = flItem.layers

tableItems = flItem.tables

fc = flItemLayers[3]
itemTable = tableItems[1]
payItemTable = tableItems[0]

print(fc)
print(itemTable)
print(payItemTable)


pinNo = UDOT_PIN
#OUTPUTPRJ = r"memory\outputPRJ.prj"

Path = os.path.dirname(CAD_File)
NameX = os.path.basename(CAD_File)
#print(NameX)
Extension = os.path.splitext(CAD_File)[1].lstrip(".")

def calculateCoords(scaleFactor, zone, A0, B0, ProjectPIN):
     #User defined variables (to be actually defined later)
    #Project name related
    PIN= ProjectPIN
    ProjName = "New_Project"
    scaleFactor = float(scaleFactor)
    A0 = float(A0)
    B0 = float(B0)


    if zone == "North":
        #Projection related
        ProjectionName = "Lambert_Conformal_Conic"
        FalseEasting = (1640416.66666666 * float(scaleFactor)) + A0
        FalseNorthing = (3280833.33333333 * float(scaleFactor)) + B0
        CentralMeridian = -111.5
        StandardParallel1 = 40.716666666666600000
        StandardParallel2 = 41.783333333333300000
        ScaleFactor = scaleFactor
        LatOfOrigin = 40.333333333333300000
        LinearUnit = "Foot_US"
        MetersPerFoot = 0.3048006096
        #Geographic Coordinate System
        GeoCS = '"GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]'

        #The string for the projection with user inputted variables
        projString = ('PROJCS["' + str(PIN) + '_' + ProjName +
                    '",GEOGCS[' + GeoCS +
                    '],PROJECTION["' + ProjectionName +
                    '"],PARAMETER["False_Easting",' + str(FalseEasting) +
                    '],PARAMETER["False_Northing",' + str(FalseNorthing) +
                    '],PARAMETER["Central_Meridian",' + str(CentralMeridian) +
                    '],PARAMETER["Standard_Parallel_1",' + str(StandardParallel1) +
                    '],PARAMETER["Standard_Parallel_2",' + str(StandardParallel2) +
                    '],PARAMETER["Scale_Factor",' + str(ScaleFactor) +
                    '],PARAMETER["Latitude_Of_Origin",' + str(LatOfOrigin) +
                    '],UNIT["' + LinearUnit + '",' + str(MetersPerFoot) + ']]')
        return projString
    elif zone == "South":
       #Projection related
        ProjectionName = "Lambert_Conformal_Conic"
        FalseEasting = (1640416.666666660000000000 * float(scaleFactor)) + A0
        FalseNorthing = (9842500.000000000000000000 * float(scaleFactor)) + B0
        CentralMeridian = -111.5
        StandardParallel1 = 37.216666666666600000
        StandardParallel2 = 38.350000000000000000
        ScaleFactor = scaleFactor
        LatOfOrigin = 36.666666666666600000
        LinearUnit = "Foot_US"
        MetersPerFoot = 0.3048006096
        #Geographic Coordinate System
        GeoCS = '"GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]'

        #The string for the projection with user inputted variables
        projString = ('PROJCS["' + str(PIN) + '_' + ProjName +
                    '",GEOGCS[' + GeoCS +
                    '],PROJECTION["' + ProjectionName +
                    '"],PARAMETER["False_Easting",' + str(FalseEasting) +
                    '],PARAMETER["False_Northing",' + str(FalseNorthing) +
                    '],PARAMETER["Central_Meridian",' + str(CentralMeridian) +
                    '],PARAMETER["Standard_Parallel_1",' + str(StandardParallel1) +
                    '],PARAMETER["Standard_Parallel_2",' + str(StandardParallel2) +
                    '],PARAMETER["Scale_Factor",' + str(ScaleFactor) +
                    '],PARAMETER["Latitude_Of_Origin",' + str(LatOfOrigin) +
                    '],UNIT["' + LinearUnit + '",' + str(MetersPerFoot) + ']]')
        return projString
    elif zone == "Central":
        #Projection related
        ProjectionName = "Lambert_Conformal_Conic"
        FalseEasting = (1640416.666666660000000000 * float(scaleFactor)) + A0
        FalseNorthing = (6561666.666666660000000000 * float(scaleFactor)) + B0
        CentralMeridian = -111.5
        StandardParallel1 = 39.016666666666600000
        StandardParallel2 = 40.649000000000000000
        ScaleFactor = scaleFactor
        LatOfOrigin = 38.333333333333300000
        LinearUnit = "Foot_US"
        MetersPerFoot = 0.3048006096
        #Geographic Coordinate System
        GeoCS = '"GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]'

        #The string for the projection with user inputted variables
        projString = ('PROJCS["' + str(PIN) + '_' + ProjName +
                    '",GEOGCS[' + GeoCS +
                    '],PROJECTION["' + ProjectionName +
                    '"],PARAMETER["False_Easting",' + str(FalseEasting) +
                    '],PARAMETER["False_Northing",' + str(FalseNorthing) +
                    '],PARAMETER["Central_Meridian",' + str(CentralMeridian) +
                    '],PARAMETER["Standard_Parallel_1",' + str(StandardParallel1) +
                    '],PARAMETER["Standard_Parallel_2",' + str(StandardParallel2) +
                    '],PARAMETER["Scale_Factor",' + str(ScaleFactor) +
                    '],PARAMETER["Latitude_Of_Origin",' + str(LatOfOrigin) +
                    '],UNIT["' + LinearUnit + '",' + str(MetersPerFoot) + ']]')
        return projString
    else:
        return "Error: Invalid Zone"

def updateRelatedTables(fc2):

    #itemTable = r"D:\I80RelatedPayItemTest\DigitalDeliveryTest.sde\DigitalDeliveryTesting.AGS.ItemsTable"
    itemFields = ['PIN','Item','Value','Related_GUID','CAD_DRAWING']
    #payItemTable = r"D:\I80RelatedPayItemTest\DigitalDeliveryTest.sde\DigitalDeliveryTesting.AGS.PayItemTable"
    payItemFields = ["PIN", "Pay_Item","Related_GUID","PayItemDetailTable_GUID", "Pay_Item_Name","CAD_DRAWING"]
    fields = []
    writeItems = []
    writePayItems = []

    cpuFields = [
    'OBJECTID',
    'Shape',
    'Entity',
    'Handle',
    'Layer',
    'LyrFrzn',
    'LyrLock',
    'LyrOn',
    'LyrVPFrzn',
    'LyrHandle',
    'Color',
    'EntColor',
    'LyrColor',
    'BlkColor',
    'Linetype',
    'EntLinetype',
    'LyrLnType',
    'BlkLinetype',
    'Elevation',
    'Thickness',
    'LineWt',
    'EntLineWt',
    'LyrLineWt',
    'BlkLineWt',
    'RefName',
    'LTScale',
    'ExtX',
    'ExtY',
    'ExtZ',
    'DocName',
    'DocPath',
    'DocType',
    'DocVer',
    'DocUpdate',
    'EID',
    'Shape_Length',
    'LvlDesc', 'LvlPlot', 'Class', 'GGroup',
    'Fill', 'QrotW', 'QrotX', 'QrotY', 'QrotZ', 'DocId'
    ]

    for field in arcpy.ListFields(fc2):
        if field.name not in cpuFields:
            fields.append(field.name)

    #for field in fields:
        #print("'" + field + "',")



    #print(fields)

    with arcpy.da.SearchCursor(fc2, fields) as searchCursor:
        for row in searchCursor:
            counter = 0
            pinumber = []
            piname = []
            globalidindex = fields.index(u'GlobalID')
            #printglobalidindex
            globalid = row[globalidindex]
            #globalid = row[len(row)-1]
            #print(len(piname), len(pinumber))
            #print(fields)
            #print(row)

            for item in row:
                if item:
                    #print(item)
                    if fields[counter] != "GlobalID":
                        writeItems.append({"attributes": 
                           {"PIN": pinNo,
                            "Item": fields[counter].replace("_"," "),
                            "Value": item,
                            "Related_GUID": globalid,
                            "CAD_DRAWING": NameX            
                            }
                         })
                if 'Pay_Item' in fields[counter]:
                    if '_Number' in fields[counter]:
                        if item:
                            #print(str(item).zfill(9))
                            pinumber.append(str(item).zfill(9))
                    elif '_Name' in fields[counter]:
                        #print(item)
                        if item:
                            piname.append(str(item))
                counter += 1
            #print(piname, pinumber)
            #print(len(piname),len(pinumber))
            if len(pinumber) == len(piname):
                
                pcounter = 0
                for i in pinumber:
                    #print(len(piname),len(pinumber))
                    if len(pinumber) > 0:
                        #print(i)
                        if i:
                            
                            writePayItems.append({"attributes": 
                                                   {"PIN": pinNo,
                                                    "Pay_Item": i,
                                                    "Related_GUID": globalid,
                                                    "PayItemDetailTable_GUID": None,
                                                    "Pay_Item_Name": piname[pcounter],
                                                    "CAD_DRAWING": NameX
                                                    }
                                                 })
                            #payItemCursor.insertRow(("12345", i, globalid,None, piname[pcounter]))
                            #del payItemCursor
                        pcounter += 1
    print("writingPayItems")
    print(writePayItems)
    tableAdds = itemTable.edit_features(adds= writeItems)
    payTableAdds = payItemTable.edit_features(adds= writePayItems)




def DXFtoGISwithReport(Excel_Report, CAD_File, UDOT_Region_Number, prj):  # DXF to GIS with Report Join

   

    #temp_dir = r'C:\Users\derricks\OneDrive - Horrocks Engineers\Desktop\DigitalDelivery'
    temp_dir = tempfile.mkdtemp()
    temp_gdb = "fGDB.gdb"
    
    FromDGNFiles_gdb = arcpy.CreateFileGDB_management(temp_dir, temp_gdb)
    
    with arcpy.EnvManager(extent="MAXOF", outputMFlag="Disabled", outputZFlag="Disabled"):
       
        if NameX:
            Name = "X"+"NameX" [ 0:-4 ][0]

        # Process: CAD to Geodatabase (CAD to Geodatabase)
        if Name and NameX:
            with arcpy.EnvManager(extent="MAXOF"):
                FromCAD = arcpy.CADToGeodatabase_conversion(input_cad_datasets=[CAD_File], out_gdb_path=FromDGNFiles_gdb, out_dataset_name="FromCAD", reference_scale=1000, spatial_reference="")[0]

        # Process: Select_Data (Select Data)
        # Select Data Utility is not implemented
        inputPolyline = temp_dir + "\\" + temp_gdb + "\\FromCAD\\polyline"
        # Process: Copy Features (Copy Features)
        FPolyline = temp_dir + "\\" + temp_gdb + "\\FPolyline"
        if Name and NameX:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.CopyFeatures_management(in_features=inputPolyline, out_feature_class=FPolyline, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Add Field (Add Field)
        if Name and NameX:
            Polyline_2 = arcpy.AddField_management(in_table=FPolyline, field_name="EID", field_type="LONG", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (Calculate Field)
        if Name and NameX:
            Polyline_3 = arcpy.CalculateField_management(in_table=Polyline_2, field=g_ESRI_variable_1, expression=g_ESRI_variable_2, expression_type="PYTHON3", code_block="")[0]

        # Process: Excel To Table (Excel To Table)
        Name = "1"
        _Name_ = temp_dir + "\\" + temp_gdb +"\\x_" + Name
        if Name and NameX:
            arcpy.ExcelToTable_conversion(Excel_Report, _Name_,)

        # Process: Join Field (2) (Join Field)
        if Name and NameX:
            #print("x"+_Name_)
            Polyline_4 = arcpy.JoinField_management(in_data=Polyline_3, in_field=g_ESRI_variable_1, join_table=_Name_, join_field=g_ESRI_variable_3, fields=[])[0]

        # Process: Repair Geometry (2) (Repair Geometry)
        if Name and NameX:
            Repaired_Input_Features_2_ = arcpy.RepairGeometry_management(in_features=Polyline_4, delete_null="DELETE_NULL", validation_method="ESRI")[0]

        # Process: Define Projection (Define Projection)
        if Name and NameX and Repaired_Input_Features_2_:
            Update_Input_Dataset_or_Feature_Class = arcpy.DefineProjection_management(in_dataset=Repaired_Input_Features_2_, coor_system= prj )

        # Process: Project (Project)
        FPolyline_Project = temp_dir + "\\" + temp_gdb +"\\FPolyline_Project"
        if Name and NameX and Repaired_Input_Features_2_:
            arcpy.Project_management(in_dataset=Update_Input_Dataset_or_Feature_Class, out_dataset=FPolyline_Project, out_coor_system="PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]]", transform_method=["NAD_1983_To_WGS_1984_5"], in_coor_system="PROJCS['12345_New_Project',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',640701.9679333265],PARAMETER['False_Northing',-437192.1282666735],PARAMETER['Central_Meridian',-111.5],PARAMETER['Standard_Parallel_1',39.0166666666666],PARAMETER['Standard_Parallel_2',40.649],PARAMETER['Scale_Factor',1.00017392],PARAMETER['Latitude_Of_Origin',38.3333333333333],UNIT['Foot_US',0.3048006096]]", preserve_shape="NO_PRESERVE_SHAPE", max_deviation="", vertical="NO_VERTICAL")

        # Process: Copy Features (2) (Copy Features)
        _Name_2_ = temp_dir + "\\" + temp_gdb +"\\y_" + Name
        if Name and NameX and Repaired_Input_Features_2_:
            arcpy.CopyFeatures_management(in_features=FPolyline_Project, out_feature_class=_Name_2_, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Add Field (4) (Add Field)
        if Name and NameX and Repaired_Input_Features_2_:
            _Name_8_ = arcpy.AddField_management(in_table=_Name_2_, field_name="UDOT_Region", field_type="TEXT", field_precision=None, field_scale=None, field_length=10, field_alias="UDOT Region", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (3) (Calculate Field)
        if Name and NameX and Repaired_Input_Features_2_:
            _Name_7_ = arcpy.CalculateField_management(in_table=_Name_8_, field=g_ESRI_variable_4, expression=g_ESRI_variable_5 + UDOT_Region_Number + g_ESRI_variable_5, expression_type="PYTHON3", code_block="")[0]

        # Process: Add Field (2) (Add Field)
        if Name and NameX and Repaired_Input_Features_2_:
            _Name_3_ = arcpy.AddField_management(in_table=_Name_7_, field_name="UDOT_PIN", field_type="TEXT", field_precision=None, field_scale=None, field_length=6, field_alias="UDOT Pin Number", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (2) (Calculate Field)
        if Name and NameX and Repaired_Input_Features_2_:
            _Name_5_ = arcpy.CalculateField_management(in_table=_Name_3_, field=g_ESRI_variable_6, expression=g_ESRI_variable_5+UDOT_PIN+g_ESRI_variable_5, expression_type="PYTHON3", code_block="")[0]
            arcpy.AddGlobalIDs_management(_Name_5_)

        sql = "PIN = '"+UDOT_PIN+"' And CAD_DRAWING = '"+NameX+g_ESRI_variable_5
        print(sql)
        fc.delete_features(where=sql)
        itemTable.delete_features(where=sql)
        payItemTable.delete_features(where=sql)

        insertRecords = []
        with arcpy.da.SearchCursor(_Name_5_, ["DocName","GlobalID","UDOT_Region","UDOT_PIN","SHAPE@", "LAYER"]) as cursor:
            for row in cursor:
                if row[4]:            
                    if len(row[4]) >= 1:
                        #line = row[4].replace('"hasZ":true,','').replace(",0]","]")
                        #print(row[4].JSON)
                        line = arcgis.geometry.Geometry(row[4].JSON)   
                        insertRecords.append(
                            {"attributes": 
                               {"Layer": row[5],
                                "CAD_DRAWING": row[0],
                                "GUID": row[1],
                                "REGION": row[2],
                                "PIN": UDOT_PIN}, 
                           "geometry": 
                           line})

        add_result = fc.edit_features(adds= insertRecords)
        fc2 = _Name_5_
        updateRelatedTables(fc2)

def getGeometry(shp):




    line = {
  "paths" : [[[-97.06138,32.837],[-97.06133,32.836],[-97.06124,32.834],[-97.06127,32.832]],
             [[-97.06326,32.759],[-97.06298,32.755]]],
  "spatialReference" : {"wkid" : 4326}
  }
        
if __name__ == '__main__':
   
    newPrj = calculateCoords(Scale_factor, Utah_Zone, A0, B0, UDOT_PIN)

    
    DXFtoGISwithReport(Excel_Report, CAD_File, UDOT_Region_Number, newPrj)
    













